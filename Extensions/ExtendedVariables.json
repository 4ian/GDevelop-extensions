{
  "author": "@Bouh",
  "description": "This extension provides conditions to check if a global/scene/object variable exists and actions to delete an existing global/scene variable from memory.",
  "extensionNamespace": "",
  "fullName": "Extended variables support",
  "name": "ExtendedVariables",
  "shortDescription": "Conditions and actions to check for the existence of a variable, or delete existing ones from memory.",
  "tags": "variables, scene variables, global variables, object variables",
  "version": "0.0.1",
  "eventsFunctions": [
    {
      "description": "Global variable exist",
      "fullName": "Global variable exist",
      "functionType": "Condition",
      "name": "C_global_variable_exist",
      "sentence": "If the global variable _PARAM1_ exist",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var globalVariables = runtimeScene.getGame().getVariables();\r\neventsFunctionContext.returnValue = globalVariables.has(eventsFunctionContext.getArgument(\"GlobalVariableName\"));",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the global variable",
          "name": "GlobalVariableName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Scene variable exist",
      "fullName": "Scene variable exist",
      "functionType": "Condition",
      "name": "C_scene_variable_exist",
      "sentence": "If the scene variable _PARAM1_ exist",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var sceneVariables = runtimeScene.getVariables();\r\neventsFunctionContext.returnValue = sceneVariables.has(eventsFunctionContext.getArgument(\"SceneVariableName\"));",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the scene variable",
          "name": "SceneVariableName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Object variable exist",
      "fullName": "Object variable exist",
      "functionType": "Condition",
      "name": "C_object_variable_exist",
      "sentence": "If the object _PARAM1_  has variable object _PARAM2_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "var returnValue = true;\r\nif (!objects.length) {\r\n    returnValue = false;\r\n} else {\r\n    var objectVariableName = eventsFunctionContext.getArgument(\"ObjectVariableName\");\r\n    for (var i = 0; i < objects.length; i++) {\r\n        if (!objects[i].hasVariable(objectVariableName)) {\r\n            // If any object does NOT have the variable, return false.\r\n            returnValue = false;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\neventsFunctionContext.returnValue = returnValue;",
              "parameterObjects": "ObjectToCheck",
              "useStrict": true
            }
          ]
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Object",
          "name": "ObjectToCheck",
          "optional": false,
          "supplementaryInformation": "",
          "type": "objectList"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of object variable",
          "name": "ObjectVariableName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Delete global variable",
      "fullName": "Delete global variable",
      "functionType": "Action",
      "name": "A_Delete_global_variable",
      "sentence": "Delete global variable _PARAM1_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "runtimeScene.getGame().getVariables().remove(eventsFunctionContext.getArgument(\"GlobalVariableName\"));",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the global variable to delete",
          "name": "GlobalVariableName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Delete scene variable",
      "fullName": "Delete scene variable",
      "functionType": "Action",
      "name": "A_Delete_scene_variable",
      "sentence": "Delete scene variable _PARAM1_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "runtimeScene.getVariables().remove(eventsFunctionContext.getArgument(\"SceneVariableName\"));",
          "parameterObjects": "",
          "useStrict": true
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Name of the scene variable to delete",
          "name": "SceneVariableName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}
