{
  "author": "add_",
  "description": "A collection of 7 calculations functions to help find slope, gcf and many other values.\n\nEnjoy :)",
  "extensionNamespace": "",
  "fullName": "calculations",
  "name": "calc",
  "shortDescription": "A collection of 7 calculations functions to help find slope, gcf and many other values.",
  "tags": "calculations, math",
  "version": "1.1.0",
  "eventsFunctions": [
    {
      "description": "Calculates the steepness of a line between two points",
      "fullName": "Slope",
      "functionType": "Expression",
      "name": "slope",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function slope(x1, y1, x2, y2) {\r\n    let rise =  y2 - y1;\r\n    let run = x2 - x1;\r\n\r\n    return rise / run;\r\n}\r\n\r\nconst x1 = eventsFunctionContext.getArgument(\"x1\");\r\nconst y1 = eventsFunctionContext.getArgument(\"y1\");\r\nconst x2 = eventsFunctionContext.getArgument(\"x2\");\r\nconst y2 = eventsFunctionContext.getArgument(\"y2\");\r\n\r\neventsFunctionContext.returnValue = slope(x1, y1, x2, y2);",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "x1 | x value of the first point",
          "longDescription": "",
          "name": "x1",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "y1 | y value of the first point",
          "longDescription": "",
          "name": "y1",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "x2 | x value of the second point",
          "longDescription": "",
          "name": "x2",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "y2 | y value of the second point",
          "longDescription": "",
          "name": "y2",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "finds the point in the middle of the two values provided",
      "fullName": "Midpoint",
      "functionType": "Expression",
      "name": "midpoint",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function midpoint(n1, n2) {\n    return (n1 + n2) / 2;\n}\n\nconst n1 = eventsFunctionContext.getArgument(\"n1\");\nconst n2 = eventsFunctionContext.getArgument(\"n2\");\n\neventsFunctionContext.returnValue = midpoint(n1, n2);",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "n1 | position of the first point",
          "longDescription": "",
          "name": "n1",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "n2 | position of the second point",
          "longDescription": "",
          "name": "n2",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Converts a number of one range e.g. 0-1 to another 0-255",
      "fullName": "Map",
      "functionType": "Expression",
      "name": "map",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function map(n, min1, max1, min2, max2) {\n    return (n - min1) / (max1 - min1) * (max2 - min1) + min2;\n}\n\nconst n = eventsFunctionContext.getArgument(\"n\");\nconst min1 = eventsFunctionContext.getArgument(\"min1\");\nconst max1 = eventsFunctionContext.getArgument(\"max1\");\nconst min2 = eventsFunctionContext.getArgument(\"min2\");\nconst max2 = eventsFunctionContext.getArgument(\"max2\");\n\neventsFunctionContext.returnValue = map(n, min1, max1, min2, max2);",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "n | value to convert",
          "longDescription": "",
          "name": "n",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "min1 | lowest value of the first range",
          "longDescription": "",
          "name": "min1",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "max1 | highest value of the first range",
          "longDescription": "",
          "name": "max1",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "min2 | lowest value of the second range",
          "longDescription": "",
          "name": "min2",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "max2 | highest value of the second range",
          "longDescription": "",
          "name": "max2",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Finds the length of the longest side of a right angle triangle using Pythagorean theorem",
      "fullName": "Hypotenuse length",
      "functionType": "Expression",
      "name": "hypot",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function hypot(a, b) {\r\n    let c2 = Math.pow(a, 2) + Math.pow(b, 2);\r\n\r\n    return Math.sqrt(c2);\r\n}\r\n\r\nconst a = eventsFunctionContext.getArgument(\"a\");\r\nconst b = eventsFunctionContext.getArgument(\"b\");\r\n\r\neventsFunctionContext.returnValue = hypot(a, b);",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "a | leg of the triangle",
          "longDescription": "",
          "name": "a",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "b | the other leg of the triangle",
          "longDescription": "",
          "name": "b",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns the greatest common factor of two numbers ",
      "fullName": "Greatest common factor (gcd)",
      "functionType": "Expression",
      "name": "gcf",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "//uses the Euclidean algorithm\nfunction gcf(a, b) {\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n\nconst a = eventsFunctionContext.getArgument(\"a\");\nconst b = eventsFunctionContext.getArgument(\"b\");\n\neventsFunctionContext.returnValue = gcf(a, b);\n\n//https://en.wikipedia.org/wiki/Euclidean_algorithm",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "a | a number ",
          "longDescription": "",
          "name": "a",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "b | another number",
          "longDescription": "",
          "name": "b",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns the lowest common multiple of two numbers ",
      "fullName": "Lowest common multiple (lcm)",
      "functionType": "Expression",
      "name": "lcm",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function gcf(a, b) {\r\n    while (a != b) {\r\n        if (a > b) {\r\n            a = a - b;\r\n        } else {\r\n            b = b - a;\r\n        }\r\n    }\r\n    return a;\r\n}\r\n\r\nfunction lcm(a, b) {\r\n    return Math.abs(a * b) / gcf(a, b);\r\n}\r\n\r\nconst a = eventsFunctionContext.getArgument(\"a\");\r\nconst b = eventsFunctionContext.getArgument(\"b\");\r\n\r\neventsFunctionContext.returnValue = lcm(a, b);\r\n\r\n//https://en.wikipedia.org/wiki/Greatest_common_divisor",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "a | a number ",
          "longDescription": "",
          "name": "a",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "b | another number",
          "longDescription": "",
          "name": "b",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns factorials",
      "fullName": "Factorial (!)",
      "functionType": "Expression",
      "name": "factorial",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "function factorial(n) {\r\n    let result = 1;\r\n\r\n    let i = 1;\r\n    for (i = 1; i <= n; i++) {\r\n        result *= i;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst n = eventsFunctionContext.getArgument(\"n\");\r\n\r\neventsFunctionContext.returnValue = factorial(n);\r\n\r\n//https://www.mathsisfun.com/numbers/factorial.html",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "n | any positive integer",
          "longDescription": "",
          "name": "n",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}