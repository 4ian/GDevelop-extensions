{
  "author": "Bouh",
  "description": "Easy to use this extention give you actions, conditions, and expressions for controllers.\nYou can connect multiple gamepads and play all together.",
  "extensionNamespace": "",
  "fullName": "Controllers",
  "name": "Controllers",
  "shortDescription": "Add the support of controllers.",
  "tags": "controllers, gamepads, manette, xbox, ps4",
  "version": "0.0.4",
  "eventsFunctions": [
    {
      "description": "Return pressure of trigger given for specifed controller",
      "fullName": "Return pressure trigger",
      "functionType": "Expression",
      "name": "E_pressure_trigger",
      "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\n\r\nvar gamepad = gamepads[Number(eventsFunctionContext.getArgument(\"player_ID\") - 1)];\r\nif (gamepad == null) {\r\n    //console.log(\"Gamepad %d is null, maybe controller is not connected\", eventsFunctionContext.getArgument(\"player_ID\"));\r\n    return;\r\n}\r\n\r\n\r\nvar param_trigger = eventsFunctionContext.getArgument(\"trigger\").toString().toUpperCase();\r\n\r\nswitch (param_trigger) {\r\n    case 'LT':\r\n    case 'L2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[6].value;\r\n        break;\r\n\r\n    case 'RT':\r\n    case 'R2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[7].value;\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter the number of player, 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "LT, RT, L2, R2",
          "name": "trigger",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Return value of axis given for specifed stick with specifed player",
      "fullName": "Return axis value",
      "functionType": "Expression",
      "name": "E_Axis_factor",
      "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\n\r\nvar gamepad = gamepads[Number(eventsFunctionContext.getArgument(\"player_ID\") - 1)];\r\nif (gamepad == null) {\r\n    //console.log(\"Gamepad %d is null, maybe controller is not connected\", eventsFunctionContext.getArgument(\"player_ID\"));\r\n    return;\r\n}\r\n\r\n//console.log(window._extensionController._deadzone);\r\n\r\nvar setDeadzone = function (v) {\r\n    // Anything smaller than this is assumed to be 0,0\r\n    var DEADZONE =  window._extensionController.deadzone || 0.2;\r\n    console.log(\"int : \" + DEADZONE);\r\n\r\n    if (Math.abs(v) < DEADZONE) {\r\n        // In the dead zone, set to 0\r\n        v = 0;\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n\r\n    } else {\r\n        // We're outside the dead zone, but we'd like to smooth\r\n        // this value out so it still runs nicely between 0..1.\r\n        // That is, we don't want it to jump suddenly from 0 to\r\n        // DEADZONE.\r\n\r\n        // Remap v from\r\n        //    DEADZONE..1 to 0..(1-DEADZONE)\r\n        // or from\r\n        //    -1..-DEADZONE to -(1-DEADZONE)..0\r\n\r\n        v = v - Math.sign(v) * DEADZONE;\r\n\r\n        // Remap v from\r\n        //    0..(1-DEADZONE) to 0..1\r\n        // or from\r\n        //    -(1-DEADZONE)..0 to -1..0\r\n\r\n        v /= (1.0 - DEADZONE);\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n    }\r\n};\r\n\r\nvar stick = eventsFunctionContext.getArgument(\"stick\").toString().toUpperCase();\r\nvar direction = eventsFunctionContext.getArgument(\"direction\").toString().toUpperCase();\r\nvar axis;\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (setDeadzone(gamepad.axes[0]) < 0) {\r\n                    eventsFunctionContext.returnValue = -setDeadzone(gamepad.axes[0]);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (setDeadzone(gamepad.axes[0]) > 0) {\r\n                    eventsFunctionContext.returnValue = setDeadzone(gamepad.axes[0]);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (setDeadzone(gamepad.axes[1]) < 0) {\r\n                    eventsFunctionContext.returnValue = -setDeadzone(gamepad.axes[1]);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (setDeadzone(gamepad.axes[1]) > 0) {\r\n                    eventsFunctionContext.returnValue = setDeadzone(gamepad.axes[1]);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                //console.log('null axe');\r\n                eventsFunctionContext.returnValue = 1337;\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (setDeadzone(gamepad.axes[2]) < 0) {\r\n                    eventsFunctionContext.returnValue = -setDeadzone(gamepad.axes[2]);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (setDeadzone(gamepad.axes[2]) > 0) {\r\n                    eventsFunctionContext.returnValue = setDeadzone(gamepad.axes[2]);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (setDeadzone(gamepad.axes[3]) < 0) {\r\n                    eventsFunctionContext.returnValue = -setDeadzone(gamepad.axes[3]);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (setDeadzone(gamepad.axes[3]) > 0) {\r\n                    eventsFunctionContext.returnValue = setDeadzone(gamepad.axes[3]);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        break;\r\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter the number of player, 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "LEFT, RIGHT",
          "name": "stick",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "UP, DOWN, LEFT, RIGHT",
          "name": "direction",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Return the index of last button used",
      "fullName": "Return last button",
      "functionType": "Expression",
      "name": "E_Get_LastButton",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\n\r\nvar param_player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\r\nif (param_player_ID == null) {\r\n    return;\r\n}\r\n\r\nif (window._extensionController.players == undefined) {\r\n    window._extensionController.players = new Array();\r\n}\r\n\r\nif (window._extensionController.players[param_player_ID] == undefined) {\r\n    window._extensionController.players[param_player_ID] = new Object();\r\n    window._extensionController.players[param_player_ID].lastButtonUsed = -1;\r\n}\r\n\r\neventsFunctionContext.returnValue = window._extensionController.players[param_player_ID].lastButtonUsed;\r\n\r\n\r\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter the number of player, 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Test if a button is pressed",
      "fullName": "Button pressed",
      "functionType": "Condition",
      "name": "C_Button_pressed",
      "sentence": "Player _PARAM1_ press button _PARAM2_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\nvar param_player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\r\nvar gamepad = gamepads[param_player_ID];\r\nif (gamepad == null) {\r\n    //console.log(\"Gamepad %d is null, maybe controller is not connected\", eventsFunctionContext.getArgument(\"player_ID\"));\r\n    return;\r\n}\r\n\r\nvar param_button = eventsFunctionContext.getArgument(\"button\").toString().toUpperCase();\r\nvar btn_id;\r\n\r\nswitch (param_button) {\r\n    case 'A':\r\n    case 'CROSS':\r\n        btn_id = 0;\r\n        //console.log('A CROSS');\r\n        break;\r\n    case 'B':\r\n    case 'CIRCLE':\r\n        btn_id = 1;\r\n        //console.log('B CIRCLE');\r\n        break;\r\n    case 'X':\r\n    case 'SQUARE':\r\n        btn_id = 2;\r\n        //console.log('X SQUARE');\r\n        break;\r\n    case 'Y':\r\n    case 'TRIANGLE':\r\n        btn_id = 3;\r\n        //console.log('Y TRIANGLE');\r\n        break;\r\n    case 'LB':\r\n    case 'L1':\r\n        btn_id = 4;\r\n        //console.log('LB L1');\r\n        break;\r\n    case 'RB':\r\n    case 'R1':\r\n        btn_id = 5;\r\n        //console.log('RB R1');\r\n        break;\r\n    case 'LT':\r\n    case 'L2':\r\n        btn_id = 6;\r\n        //console.log('LT L2');\r\n        break;\r\n    case 'RT':\r\n    case 'R2':\r\n        btn_id = 7;\r\n        //console.log('RT R2');\r\n        break;\r\n\r\n    case 'UP':\r\n        btn_id = 12;\r\n        //console.log('UP');\r\n        break;\r\n    case 'DOWN':\r\n        btn_id = 13;\r\n        //console.log('DOWN');\r\n        break;\r\n    case 'LEFT':\r\n        btn_id = 14;\r\n        //console.log('LEFT');\r\n        break;\r\n    case 'RIGHT':\r\n        btn_id = 15;\r\n        //console.log('RIGHT');\r\n        break;\r\n\r\n    case 'BACK':\r\n    case 'SHARE':\r\n        btn_id = 8;\r\n        //console.log('BACK SHARE');\r\n        break;\r\n    case 'START':\r\n    case 'OPTIONS':\r\n        btn_id = 9;\r\n        //console.log('START OPTIONS');\r\n        break;\r\n\r\n    case 'CLICK_STICK_LEFT':\r\n        btn_id = 10;\r\n        //console.log('CLICK_STICK_LEFT');\r\n        break;\r\n    case 'CLICK_STICK_RIGHT':\r\n        btn_id = 11;\r\n        //console.log('CLICK_STICK_RIGHT');\r\n        break;\r\n\r\n    //PS4\r\n    case 'PS_BUTTON':\r\n        btn_id = 16;\r\n        //console.log('PS_BUTTON');\r\n        break;\r\n    case 'CLICK_TOUCHPAD':\r\n        btn_id = 17;\r\n        //console.log('CLICK_TOUCHPAD');\r\n        break;\r\n\r\n    default:\r\n        //console.log('null btn');\r\n        break;\r\n}\r\n\r\nif (typeof (gamepad.buttons[btn_id]) == \"undefined\") {\r\n    return;\r\n}\r\n\r\nvar create_name_var = \"player_\" + eventsFunctionContext.getArgument(\"player_ID\") + \"_button_\" + param_button;\r\nvar var_for_debug = runtimeScene.getVariables().get(create_name_var);\r\n\r\nif (window._extensionController.players == undefined) {\r\n    window._extensionController.players = new Array();\r\n}\r\n\r\nif (window._extensionController.players[param_player_ID] == undefined) {\r\n    window._extensionController.players[param_player_ID] = new Object();\r\n    window._extensionController.players[param_player_ID].lastButtonUsed = -1;\r\n}\r\n\r\nif (gamepad.buttons[btn_id].pressed) {\r\n    var_for_debug.setString(\"Pressed\");\r\n    //console.log(\"Gamepad  %d button 0,A is pressed\",  eventsFunctionContext.getArgument(\"player_ID\"));\r\n    window._extensionController.players[param_player_ID].lastButtonUsed = btn_id;\r\n    eventsFunctionContext.returnValue = true;\r\n} else {\r\n    var_for_debug.setString(\"--\");\r\n    //console.log(\"Gamepad  %d button 0,A is NOT pressed\",  eventsFunctionContext.getArgument(\"player_ID\"));\r\n    eventsFunctionContext.returnValue = false;\r\n}\r\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter the number of player, 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "---XBOX: A, B, X, Y, LB , RB, LT, RT, BACK, START | ---PS4: CROSS, SQUARE, CIRCLE, TRIANGLE, L1, L2, R1, R2, SHARE, OPTIONS, PS_BUTTON, CLICK_TOUCHPAD | ---ANY: UP, DOWN, LEFT, RIGHT, CLICK_STICK_LEFT, CLICK_STICK_RIGHT",
          "name": "button",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Return value of deadzone for sticks",
      "fullName": "Return deadzone",
      "functionType": "Expression",
      "name": "E_Get_deadzone",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "if(window._extensionController.deadzone != undefined){\r\n    eventsFunctionContext.returnValue = window._extensionController.deadzone;\r\n}else{\r\n    eventsFunctionContext.returnValue = 0;\r\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Deadzone for sticks, 0.2 by default",
          "name": "param_deadzone",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Set deadzone for sticks",
      "fullName": "Set deadzone",
      "functionType": "Action",
      "name": "A_Set_deadzone",
      "sentence": "Set deadzone for sticks to _PARAM1_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "if (window._extensionController == undefined) {\r\n    window._extensionController = new Object();\r\n}\r\n\r\nwindow._extensionController.deadzone = Number(eventsFunctionContext.getArgument(\"param_deadzone\")) || 0.2;",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Deadzone for sticks, 0.2 by default",
          "name": "param_deadzone",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Test if a axis is pushed",
      "fullName": "Axis pushed",
      "functionType": "Condition",
      "name": "C_Axis_pushed",
      "sentence": "Player _PARAM1_ push _PARAM2_ stick to _PARAM3_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\n\r\nvar gamepad = gamepads[Number(eventsFunctionContext.getArgument(\"player_ID\") - 1)];\r\nif (gamepad == null) {\r\n    //console.log(\"Gamepad %d is null, maybe controller is not connected\", eventsFunctionContext.getArgument(\"player_ID\"));\r\n    return;\r\n}\r\n\r\n\r\nvar setDeadzone = function (v) {\r\n    // Anything smaller than this is assumed to be 0,0\r\n    var DEADZONE =  window._extensionController.deadzone || 0.2;\r\n\r\n    if (Math.abs(v) < DEADZONE) {\r\n        // In the dead zone, set to 0\r\n        v = 0;\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n\r\n    } else {\r\n        // We're outside the dead zone, but we'd like to smooth\r\n        // this value out so it still runs nicely between 0..1.\r\n        // That is, we don't want it to jump suddenly from 0 to\r\n        // DEADZONE.\r\n\r\n        // Remap v from\r\n        //    DEADZONE..1 to 0..(1-DEADZONE)\r\n        // or from\r\n        //    -1..-DEADZONE to -(1-DEADZONE)..0\r\n\r\n        v = v - Math.sign(v) * DEADZONE;\r\n\r\n        // Remap v from\r\n        //    0..(1-DEADZONE) to 0..1\r\n        // or from\r\n        //    -(1-DEADZONE)..0 to -1..0\r\n\r\n        v /= (1.0 - DEADZONE);\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n    }\r\n};\r\n\r\nvar stick = eventsFunctionContext.getArgument(\"stick\").toString().toUpperCase();\r\nvar direction = eventsFunctionContext.getArgument(\"direction\").toString().toUpperCase();\r\nvar axis;\r\n\r\n\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n\r\n                if (setDeadzone(gamepad.axes[0]) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (setDeadzone(gamepad.axes[0]) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (setDeadzone(gamepad.axes[1]) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (setDeadzone(gamepad.axes[1]) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (setDeadzone(gamepad.axes[2]) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (setDeadzone(gamepad.axes[2]) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (setDeadzone(gamepad.axes[3]) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (setDeadzone(gamepad.axes[3]) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        break;\r\n}\r\n\r\nif (eventsFunctionContext.returnValue !== true) {\r\n    eventsFunctionContext.returnValue = false;\r\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter controller number 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "LEFT, RIGHT",
          "name": "stick",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "UP, DOWN, LEFT, RIGHT",
          "name": "direction",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Return count of controllers connected",
      "fullName": "Count connected players",
      "functionType": "Expression",
      "name": "E_Count_connected_controller",
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\r\nif (!gamepads) {\r\n    console.log(\"Gamepad is not supported in this browser\");\r\n    return;\r\n}\r\n\r\nObject.keys(gamepads).forEach(key => {\r\n    if (gamepads[key]) {\r\n        eventsFunctionContext.returnValue = Number(key)+1;   \r\n    }\r\n});",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Check if player use specific controller",
      "fullName": "Controler type",
      "functionType": "StringExpression",
      "name": "E_Controller_type",
      "sentence": "Player _PARAM1_ use _PARAM2_ controller",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\nif (!gamepads) {\n    console.log(\"Gamepad is not supported in this browser\");\n    return;\n}\n\n\nvar player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\n\nif (gamepads[player_ID] != null) {\n    if (gamepads[player_ID].id != null) {\n        eventsFunctionContext.returnValue = gamepads[player_ID].id;\n    } else {\n        eventsFunctionContext.returnValue = \"empty\";\n    }\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter controller number 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if player use specific controller",
      "fullName": "Controler type",
      "functionType": "Condition",
      "name": "C_Controller_type",
      "sentence": "Player _PARAM1_ use _PARAM2_ controller",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\nif (!gamepads) {\n    console.log(\"Gamepad is not supported in this browser\");\n    return;\n}\n\n\nvar player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\nvar controller_type = Number(eventsFunctionContext.getArgument(\"controller_type\") - 1);\n\nif (gamepads[player_ID] != null) {\n    if (gamepads[player_ID].id.indexOf(controller_type) != -1) {\n        eventsFunctionContext.returnValue = true;\n    } else {\n        eventsFunctionContext.returnValue = false;\n    }\n}\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter controller number 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Xbox, PS4, STEAM, PS3",
          "name": "controller_type",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if player is plugged",
      "fullName": "Player plugged",
      "functionType": "Condition",
      "name": "C_Controller_X_is_connected",
      "sentence": "Player _PARAM1_ is plugged",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\nif (!gamepads) {\n    console.log(\"Gamepad is not supported in this browser\");\n    return;\n}\n\nvar player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\n\nif(gamepads[player_ID] != null){\n     eventsFunctionContext.returnValue = true; \n}else{\n     eventsFunctionContext.returnValue = false;\n}",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter controller number 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Vibrate controller",
      "fullName": "vibrationActuator is missing in electron :(",
      "functionType": "Action",
      "name": "A_Vibrate_controller",
      "sentence": "Gamepad _PARAM1_ vibrate for _PARAM2_ second",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);\nif (!gamepads) {\n  console.log(\"Gamepad is not supported in this browser\");\n  return;\n}\n\nvar player_ID = Number(eventsFunctionContext.getArgument(\"player_ID\") - 1);\nvar param_duration = Number(eventsFunctionContext.getArgument(\"param_duration\")) || 1;\n\n\nif (typeof (gamepads[player_ID].vibrationActuator) != \"undefined\") {\n  gamepads[player_ID].vibrationActuator.playEffect(\"dual-rumble\", {\n    startDelay: 0,\n    duration: param_duration * 1000,\n    weakMagnitude: 1.0,\n    strongMagnitude: 1.0\n  });\n}\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Enter controller number 1, 2, 3 or 4 (Number)",
          "name": "player_ID",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Time in second (Optionnal, default value is 1)",
          "name": "duration",
          "optional": false,
          "supplementaryInformation": "",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}
