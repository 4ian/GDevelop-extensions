{
  "author": "Arthur Pacaud (arthuro555)",
  "description": "When masked, the masked sprite is only visible semitransparently through the mask.",
  "extensionNamespace": "gdjs",
  "fullName": "Sprite Masking",
  "name": "SpriteMasking",
  "shortDescription": "Allow to use a sprite object to mask another.",
  "tags": "masking, javascript, PIXI, sprites",
  "version": "1.0.0",
  "eventsFunctions": [
    {
      "description": "Defines a sprite as mask of another.",
      "fullName": "Mask a Sprite",
      "functionType": "Action",
      "name": "Mask",
      "sentence": "Mask _PARAM1_ with mask _PARAM2_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "/**\n * Masking in GDevelop\n * @author arthuro555\n */\n\n\n// First we need to get the objects\nlet mask = eventsFunctionContext.getObjects(\"Mask\")[0];\nlet masked = eventsFunctionContext.getObjects(\"Masked\")[0];\n\n// We get the renderer of the masked object...\nlet maskedRenderer = masked.getRendererObject(); \n// ...and apply the masks renderer to his mask property\nmaskedRenderer.mask = mask.getRendererObject();\n",
          "parameterObjects": "masked",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Sprite to mask",
          "longDescription": "",
          "name": "Masked",
          "optional": false,
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Mask sprite",
          "longDescription": "",
          "name": "Mask",
          "optional": false,
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Cancels masking of a sprite by another.",
      "fullName": "Remove masking",
      "functionType": "Action",
      "name": "Unmask",
      "sentence": "Unmask _PARAM1_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "/**\n * Mask removal in GDevelop\n * @author arthuro555\n */\n\n\n// First we need to get the masked object (the one the mask has been applied to)\nlet masked = eventsFunctionContext.getObjects(\"Masked\")[0];\n\n// We get the renderer...\nlet maskedRenderer = masked.getRendererObject(); \n// And set the mask to nothing.\nmaskedRenderer.mask = null;\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "The masked sprite",
          "longDescription": "",
          "name": "Masked",
          "optional": false,
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if a sprite is masked by another.",
      "fullName": "Is Masked?",
      "functionType": "Condition",
      "name": "IsMasked",
      "sentence": "Is _PARAM1_ masked?",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "/**\n * Mask check in GDevelop\n * @author arthuro555\n */\n\n\n// First we need to get the potentially masked object\nlet masked = runtimeScene.getObjects(\"Masked\")[0];\n\n// We get the renderer...\nlet maskedRenderer = masked.getRendererObject(); \n// ...and return the condition result\neventsFunctionContext.returnValue = maskedRenderer.mask !== null;\n",
          "parameterObjects": "",
          "useStrict": true
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "Sprite to check for masking",
          "longDescription": "",
          "name": "Masked",
          "optional": false,
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}